-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity shortest is
generic (
    C_M_AXI_INPUT_R_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_INPUT_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_INPUT_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_OUTPUT_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUTPUT_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_SQRT_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_SQRT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_INPUT_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_INPUT_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_INPUT_R_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_OUTPUT_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_OUTPUT_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_OUTPUT_R_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_input_r_AWVALID : OUT STD_LOGIC;
    m_axi_input_r_AWREADY : IN STD_LOGIC;
    m_axi_input_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_input_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_input_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_input_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_AWUSER_WIDTH-1 downto 0);
    m_axi_input_r_WVALID : OUT STD_LOGIC;
    m_axi_input_r_WREADY : IN STD_LOGIC;
    m_axi_input_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_input_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_DATA_WIDTH/8-1 downto 0);
    m_axi_input_r_WLAST : OUT STD_LOGIC;
    m_axi_input_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_input_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_WUSER_WIDTH-1 downto 0);
    m_axi_input_r_ARVALID : OUT STD_LOGIC;
    m_axi_input_r_ARREADY : IN STD_LOGIC;
    m_axi_input_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_input_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_input_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_input_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ARUSER_WIDTH-1 downto 0);
    m_axi_input_r_RVALID : IN STD_LOGIC;
    m_axi_input_r_RREADY : OUT STD_LOGIC;
    m_axi_input_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_input_r_RLAST : IN STD_LOGIC;
    m_axi_input_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_input_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_RUSER_WIDTH-1 downto 0);
    m_axi_input_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_BVALID : IN STD_LOGIC;
    m_axi_input_r_BREADY : OUT STD_LOGIC;
    m_axi_input_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_input_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_BUSER_WIDTH-1 downto 0);
    m_axi_output_r_AWVALID : OUT STD_LOGIC;
    m_axi_output_r_AWREADY : IN STD_LOGIC;
    m_axi_output_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_output_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_output_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_output_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_AWUSER_WIDTH-1 downto 0);
    m_axi_output_r_WVALID : OUT STD_LOGIC;
    m_axi_output_r_WREADY : IN STD_LOGIC;
    m_axi_output_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_output_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_DATA_WIDTH/8-1 downto 0);
    m_axi_output_r_WLAST : OUT STD_LOGIC;
    m_axi_output_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_output_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_WUSER_WIDTH-1 downto 0);
    m_axi_output_r_ARVALID : OUT STD_LOGIC;
    m_axi_output_r_ARREADY : IN STD_LOGIC;
    m_axi_output_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_output_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_output_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_output_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ARUSER_WIDTH-1 downto 0);
    m_axi_output_r_RVALID : IN STD_LOGIC;
    m_axi_output_r_RREADY : OUT STD_LOGIC;
    m_axi_output_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_output_r_RLAST : IN STD_LOGIC;
    m_axi_output_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_output_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_RUSER_WIDTH-1 downto 0);
    m_axi_output_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_r_BVALID : IN STD_LOGIC;
    m_axi_output_r_BREADY : OUT STD_LOGIC;
    m_axi_output_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_output_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_sqrt_AWVALID : IN STD_LOGIC;
    s_axi_sqrt_AWREADY : OUT STD_LOGIC;
    s_axi_sqrt_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_SQRT_ADDR_WIDTH-1 downto 0);
    s_axi_sqrt_WVALID : IN STD_LOGIC;
    s_axi_sqrt_WREADY : OUT STD_LOGIC;
    s_axi_sqrt_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_SQRT_DATA_WIDTH-1 downto 0);
    s_axi_sqrt_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_SQRT_DATA_WIDTH/8-1 downto 0);
    s_axi_sqrt_ARVALID : IN STD_LOGIC;
    s_axi_sqrt_ARREADY : OUT STD_LOGIC;
    s_axi_sqrt_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_SQRT_ADDR_WIDTH-1 downto 0);
    s_axi_sqrt_RVALID : OUT STD_LOGIC;
    s_axi_sqrt_RREADY : IN STD_LOGIC;
    s_axi_sqrt_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_SQRT_DATA_WIDTH-1 downto 0);
    s_axi_sqrt_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_sqrt_BVALID : OUT STD_LOGIC;
    s_axi_sqrt_BREADY : IN STD_LOGIC;
    s_axi_sqrt_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of shortest is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "shortest_shortest,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2951,HLS_SYN_LUT=4299,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (54 downto 0) := "0000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (54 downto 0) := "0000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (54 downto 0) := "0000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (54 downto 0) := "0000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (54 downto 0) := "0000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (54 downto 0) := "0000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (54 downto 0) := "0001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (54 downto 0) := "0010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (54 downto 0) := "0100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (54 downto 0) := "1000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal column_indices : STD_LOGIC_VECTOR (63 downto 0);
    signal row_offsets : STD_LOGIC_VECTOR (63 downto 0);
    signal visited : STD_LOGIC_VECTOR (63 downto 0);
    signal queue : STD_LOGIC_VECTOR (63 downto 0);
    signal src : STD_LOGIC_VECTOR (31 downto 0);
    signal input_r_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal input_r_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal output_r_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal output_r_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal output_r_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal output_r_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal output_r_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal icmp_ln40_reg_708 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal src_read_reg_583 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_read_reg_588 : STD_LOGIC_VECTOR (63 downto 0);
    signal visited_read_reg_594 : STD_LOGIC_VECTOR (63 downto 0);
    signal row_offsets_read_reg_600 : STD_LOGIC_VECTOR (63 downto 0);
    signal column_indices_read_reg_605 : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_addr_reg_610 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln27_fu_308_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln27_reg_619 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal output_r_addr_1_reg_624 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln27_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal current_node_reg_630 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r_addr_2_reg_635 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal input_r_addr_reg_641 : STD_LOGIC_VECTOR (63 downto 0);
    signal edge_start_reg_647 : STD_LOGIC_VECTOR (31 downto 0);
    signal edge_end_reg_655 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln36_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_662 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal sub_ln36_fu_416_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln36_reg_666 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_r_addr_1_reg_671 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln36_fu_456_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal sext_ln36_1_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln36_1_reg_682 : STD_LOGIC_VECTOR (63 downto 0);
    signal neighbor_reg_690 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r_addr_3_reg_696 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal output_r_addr_3_read_reg_703 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln40_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal output_r_addr_4_reg_712 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln36_1_fu_563_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal input_r_AWREADY : STD_LOGIC;
    signal input_r_WREADY : STD_LOGIC;
    signal input_r_ARVALID : STD_LOGIC;
    signal input_r_ARREADY : STD_LOGIC;
    signal input_r_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal input_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal input_r_RVALID : STD_LOGIC;
    signal input_r_RREADY : STD_LOGIC;
    signal input_r_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal input_r_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal input_r_BVALID : STD_LOGIC;
    signal output_r_AWVALID : STD_LOGIC;
    signal output_r_AWREADY : STD_LOGIC;
    signal output_r_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_WVALID : STD_LOGIC;
    signal output_r_WREADY : STD_LOGIC;
    signal output_r_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r_ARVALID : STD_LOGIC;
    signal output_r_ARREADY : STD_LOGIC;
    signal output_r_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_RVALID : STD_LOGIC;
    signal output_r_RREADY : STD_LOGIC;
    signal output_r_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal output_r_BVALID : STD_LOGIC;
    signal output_r_BREADY : STD_LOGIC;
    signal edge_idx_1_reg_259 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state55 : BOOLEAN;
    signal sext_ln25_fu_279_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln30_fu_341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln31_1_fu_377_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln33_fu_402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln36_2_fu_446_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln40_1_fu_497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln43_1_fu_548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state19_io : BOOLEAN;
    signal ap_block_state49_io : BOOLEAN;
    signal step_fu_114 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal icmp_ln36_1_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal front_fu_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal front_1_fu_515_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_fu_269_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal shl_ln_fu_314_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln30_fu_322_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln30_fu_326_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1_fu_331_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal shl_ln1_fu_351_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln31_fu_358_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln31_fu_362_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln2_fu_367_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln33_fu_387_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln3_fu_392_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal shl_ln2_fu_420_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln36_3_fu_427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln36_fu_431_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln4_fu_436_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal shl_ln3_fu_471_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln40_fu_478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln40_fu_482_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln5_fu_487_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal shl_ln4_fu_521_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln43_fu_529_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln43_fu_533_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln6_fu_538_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component shortest_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        column_indices : OUT STD_LOGIC_VECTOR (63 downto 0);
        row_offsets : OUT STD_LOGIC_VECTOR (63 downto 0);
        visited : OUT STD_LOGIC_VECTOR (63 downto 0);
        queue : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component shortest_sqrt_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        src : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component shortest_input_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component shortest_output_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    control_s_axi_U : component shortest_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        column_indices => column_indices,
        row_offsets => row_offsets,
        visited => visited,
        queue => queue);

    sqrt_s_axi_U : component shortest_sqrt_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_SQRT_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_SQRT_DATA_WIDTH)
    port map (
        AWVALID => s_axi_sqrt_AWVALID,
        AWREADY => s_axi_sqrt_AWREADY,
        AWADDR => s_axi_sqrt_AWADDR,
        WVALID => s_axi_sqrt_WVALID,
        WREADY => s_axi_sqrt_WREADY,
        WDATA => s_axi_sqrt_WDATA,
        WSTRB => s_axi_sqrt_WSTRB,
        ARVALID => s_axi_sqrt_ARVALID,
        ARREADY => s_axi_sqrt_ARREADY,
        ARADDR => s_axi_sqrt_ARADDR,
        RVALID => s_axi_sqrt_RVALID,
        RREADY => s_axi_sqrt_RREADY,
        RDATA => s_axi_sqrt_RDATA,
        RRESP => s_axi_sqrt_RRESP,
        BVALID => s_axi_sqrt_BVALID,
        BREADY => s_axi_sqrt_BREADY,
        BRESP => s_axi_sqrt_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        src => src);

    input_r_m_axi_U : component shortest_input_r_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 9,
        C_M_AXI_ID_WIDTH => C_M_AXI_INPUT_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_INPUT_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_INPUT_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_INPUT_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_INPUT_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_INPUT_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_INPUT_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_INPUT_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_INPUT_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_INPUT_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_INPUT_R_CACHE_VALUE,
        USER_DW => 32,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_input_r_AWVALID,
        AWREADY => m_axi_input_r_AWREADY,
        AWADDR => m_axi_input_r_AWADDR,
        AWID => m_axi_input_r_AWID,
        AWLEN => m_axi_input_r_AWLEN,
        AWSIZE => m_axi_input_r_AWSIZE,
        AWBURST => m_axi_input_r_AWBURST,
        AWLOCK => m_axi_input_r_AWLOCK,
        AWCACHE => m_axi_input_r_AWCACHE,
        AWPROT => m_axi_input_r_AWPROT,
        AWQOS => m_axi_input_r_AWQOS,
        AWREGION => m_axi_input_r_AWREGION,
        AWUSER => m_axi_input_r_AWUSER,
        WVALID => m_axi_input_r_WVALID,
        WREADY => m_axi_input_r_WREADY,
        WDATA => m_axi_input_r_WDATA,
        WSTRB => m_axi_input_r_WSTRB,
        WLAST => m_axi_input_r_WLAST,
        WID => m_axi_input_r_WID,
        WUSER => m_axi_input_r_WUSER,
        ARVALID => m_axi_input_r_ARVALID,
        ARREADY => m_axi_input_r_ARREADY,
        ARADDR => m_axi_input_r_ARADDR,
        ARID => m_axi_input_r_ARID,
        ARLEN => m_axi_input_r_ARLEN,
        ARSIZE => m_axi_input_r_ARSIZE,
        ARBURST => m_axi_input_r_ARBURST,
        ARLOCK => m_axi_input_r_ARLOCK,
        ARCACHE => m_axi_input_r_ARCACHE,
        ARPROT => m_axi_input_r_ARPROT,
        ARQOS => m_axi_input_r_ARQOS,
        ARREGION => m_axi_input_r_ARREGION,
        ARUSER => m_axi_input_r_ARUSER,
        RVALID => m_axi_input_r_RVALID,
        RREADY => m_axi_input_r_RREADY,
        RDATA => m_axi_input_r_RDATA,
        RLAST => m_axi_input_r_RLAST,
        RID => m_axi_input_r_RID,
        RUSER => m_axi_input_r_RUSER,
        RRESP => m_axi_input_r_RRESP,
        BVALID => m_axi_input_r_BVALID,
        BREADY => m_axi_input_r_BREADY,
        BRESP => m_axi_input_r_BRESP,
        BID => m_axi_input_r_BID,
        BUSER => m_axi_input_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => input_r_ARVALID,
        I_ARREADY => input_r_ARREADY,
        I_ARADDR => input_r_ARADDR,
        I_ARLEN => input_r_ARLEN,
        I_RVALID => input_r_RVALID,
        I_RREADY => input_r_RREADY,
        I_RDATA => input_r_RDATA,
        I_RFIFONUM => input_r_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => input_r_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => input_r_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => input_r_BVALID,
        I_BREADY => ap_const_logic_0);

    output_r_m_axi_U : component shortest_output_r_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 9,
        C_M_AXI_ID_WIDTH => C_M_AXI_OUTPUT_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_OUTPUT_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_OUTPUT_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_OUTPUT_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_OUTPUT_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_OUTPUT_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_OUTPUT_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_OUTPUT_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_OUTPUT_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_OUTPUT_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_OUTPUT_R_CACHE_VALUE,
        USER_DW => 32,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_output_r_AWVALID,
        AWREADY => m_axi_output_r_AWREADY,
        AWADDR => m_axi_output_r_AWADDR,
        AWID => m_axi_output_r_AWID,
        AWLEN => m_axi_output_r_AWLEN,
        AWSIZE => m_axi_output_r_AWSIZE,
        AWBURST => m_axi_output_r_AWBURST,
        AWLOCK => m_axi_output_r_AWLOCK,
        AWCACHE => m_axi_output_r_AWCACHE,
        AWPROT => m_axi_output_r_AWPROT,
        AWQOS => m_axi_output_r_AWQOS,
        AWREGION => m_axi_output_r_AWREGION,
        AWUSER => m_axi_output_r_AWUSER,
        WVALID => m_axi_output_r_WVALID,
        WREADY => m_axi_output_r_WREADY,
        WDATA => m_axi_output_r_WDATA,
        WSTRB => m_axi_output_r_WSTRB,
        WLAST => m_axi_output_r_WLAST,
        WID => m_axi_output_r_WID,
        WUSER => m_axi_output_r_WUSER,
        ARVALID => m_axi_output_r_ARVALID,
        ARREADY => m_axi_output_r_ARREADY,
        ARADDR => m_axi_output_r_ARADDR,
        ARID => m_axi_output_r_ARID,
        ARLEN => m_axi_output_r_ARLEN,
        ARSIZE => m_axi_output_r_ARSIZE,
        ARBURST => m_axi_output_r_ARBURST,
        ARLOCK => m_axi_output_r_ARLOCK,
        ARCACHE => m_axi_output_r_ARCACHE,
        ARPROT => m_axi_output_r_ARPROT,
        ARQOS => m_axi_output_r_ARQOS,
        ARREGION => m_axi_output_r_ARREGION,
        ARUSER => m_axi_output_r_ARUSER,
        RVALID => m_axi_output_r_RVALID,
        RREADY => m_axi_output_r_RREADY,
        RDATA => m_axi_output_r_RDATA,
        RLAST => m_axi_output_r_RLAST,
        RID => m_axi_output_r_RID,
        RUSER => m_axi_output_r_RUSER,
        RRESP => m_axi_output_r_RRESP,
        BVALID => m_axi_output_r_BVALID,
        BREADY => m_axi_output_r_BREADY,
        BRESP => m_axi_output_r_BRESP,
        BID => m_axi_output_r_BID,
        BUSER => m_axi_output_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => output_r_ARVALID,
        I_ARREADY => output_r_ARREADY,
        I_ARADDR => output_r_ARADDR,
        I_ARLEN => ap_const_lv32_1,
        I_RVALID => output_r_RVALID,
        I_RREADY => output_r_RREADY,
        I_RDATA => output_r_RDATA,
        I_RFIFONUM => output_r_RFIFONUM,
        I_AWVALID => output_r_AWVALID,
        I_AWREADY => output_r_AWREADY,
        I_AWADDR => output_r_AWADDR,
        I_AWLEN => ap_const_lv32_1,
        I_WVALID => output_r_WVALID,
        I_WREADY => output_r_WREADY,
        I_WDATA => output_r_WDATA,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => output_r_BVALID,
        I_BREADY => output_r_BREADY);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    edge_idx_1_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((output_r_BVALID = ap_const_logic_0) and (icmp_ln40_reg_708 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
                edge_idx_1_reg_259 <= add_ln36_1_fu_563_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                edge_idx_1_reg_259 <= sext_ln36_fu_456_p1;
            end if; 
        end if;
    end process;

    front_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                front_fu_118 <= ap_const_lv32_0;
            elsif (((icmp_ln40_fu_507_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                front_fu_118 <= front_1_fu_515_p2;
            end if; 
        end if;
    end process;

    step_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                step_fu_114 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state36) and ((icmp_ln36_1_fu_462_p2 = ap_const_lv1_1) or (icmp_ln36_reg_662 = ap_const_lv1_0)))) then 
                step_fu_114 <= add_ln27_reg_619;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln27_reg_619 <= add_ln27_fu_308_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                column_indices_read_reg_605 <= column_indices;
                output_r_addr_reg_610 <= sext_ln25_fu_279_p1;
                queue_read_reg_588 <= queue;
                row_offsets_read_reg_600 <= row_offsets;
                src_read_reg_583 <= src;
                visited_read_reg_594 <= visited;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                current_node_reg_630 <= output_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                edge_end_reg_655 <= input_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                edge_start_reg_647 <= input_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                icmp_ln36_reg_662 <= icmp_ln36_fu_412_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                icmp_ln40_reg_708 <= icmp_ln40_fu_507_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_fu_412_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                input_r_addr_1_reg_671 <= sext_ln36_2_fu_446_p1;
                sub_ln36_reg_666 <= sub_ln36_fu_416_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                input_r_addr_reg_641 <= sext_ln33_fu_402_p1;
                output_r_addr_2_reg_635 <= sext_ln31_1_fu_377_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                neighbor_reg_690 <= input_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_302_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                output_r_addr_1_reg_624 <= sext_ln30_fu_341_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                output_r_addr_3_read_reg_703 <= output_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                output_r_addr_3_reg_696 <= sext_ln40_1_fu_497_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_fu_507_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                output_r_addr_4_reg_712 <= sext_ln43_1_fu_548_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                sext_ln36_1_reg_682 <= sext_ln36_1_fu_459_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state37, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state17, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state39, ap_CS_fsm_state46, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state55, icmp_ln40_reg_708, ap_CS_fsm_state48, ap_CS_fsm_state54, ap_CS_fsm_state9, icmp_ln27_fu_302_p2, icmp_ln36_fu_412_p2, icmp_ln36_reg_662, ap_CS_fsm_state28, icmp_ln40_fu_507_p2, ap_CS_fsm_state47, input_r_ARREADY, input_r_RVALID, output_r_AWREADY, output_r_WREADY, output_r_ARREADY, output_r_RVALID, output_r_BVALID, ap_block_state19_io, ap_block_state49_io, ap_CS_fsm_state36, icmp_ln36_1_fu_462_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((output_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((output_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((output_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln27_fu_302_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((output_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((output_r_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((ap_const_boolean_0 = ap_block_state19_io) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if (((output_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((output_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if (((input_r_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                if (((input_r_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                if (((icmp_ln36_fu_412_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                if (((input_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state36) and ((icmp_ln36_1_fu_462_p2 = ap_const_lv1_1) or (icmp_ln36_reg_662 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state37 => 
                if (((input_r_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                if (((output_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if (((output_r_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                if (((icmp_ln40_fu_507_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state48 => 
                if (((output_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                if (((ap_const_boolean_0 = ap_block_state49_io) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                if (((output_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                if (((output_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state55 => 
                if ((not(((output_r_BVALID = ap_const_logic_0) and (icmp_ln40_reg_708 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln27_fu_308_p2 <= std_logic_vector(unsigned(step_fu_114) + unsigned(ap_const_lv4_1));
    add_ln30_fu_326_p2 <= std_logic_vector(unsigned(zext_ln30_fu_322_p1) + unsigned(queue_read_reg_588));
    add_ln31_fu_362_p2 <= std_logic_vector(signed(sext_ln31_fu_358_p1) + signed(visited_read_reg_594));
    add_ln33_fu_387_p2 <= std_logic_vector(signed(sext_ln31_fu_358_p1) + signed(row_offsets_read_reg_600));
    add_ln36_1_fu_563_p2 <= std_logic_vector(unsigned(edge_idx_1_reg_259) + unsigned(ap_const_lv64_1));
    add_ln36_fu_431_p2 <= std_logic_vector(signed(sext_ln36_3_fu_427_p1) + signed(column_indices_read_reg_605));
    add_ln40_fu_482_p2 <= std_logic_vector(signed(sext_ln40_fu_478_p1) + signed(visited_read_reg_594));
    add_ln43_fu_533_p2 <= std_logic_vector(signed(sext_ln43_fu_529_p1) + signed(queue_read_reg_588));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(output_r_ARREADY)
    begin
        if ((output_r_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;

    ap_ST_fsm_state17_blk_assign_proc : process(output_r_RVALID)
    begin
        if ((output_r_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state17_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state17_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state18_blk <= ap_const_logic_0;

    ap_ST_fsm_state19_blk_assign_proc : process(ap_block_state19_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state19_io)) then 
            ap_ST_fsm_state19_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state19_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state20_blk_assign_proc : process(output_r_WREADY)
    begin
        if ((output_r_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state20_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state20_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;

    ap_ST_fsm_state25_blk_assign_proc : process(output_r_BVALID)
    begin
        if ((output_r_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state25_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state25_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state26_blk_assign_proc : process(input_r_RVALID)
    begin
        if ((input_r_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state26_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state26_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state27_blk_assign_proc : process(input_r_RVALID)
    begin
        if ((input_r_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state27_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state27_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state28_blk <= ap_const_logic_0;

    ap_ST_fsm_state29_blk_assign_proc : process(input_r_ARREADY)
    begin
        if ((input_r_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state29_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state29_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(output_r_AWREADY)
    begin
        if ((output_r_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;

    ap_ST_fsm_state37_blk_assign_proc : process(input_r_RVALID)
    begin
        if ((input_r_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state37_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state37_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state38_blk <= ap_const_logic_0;

    ap_ST_fsm_state39_blk_assign_proc : process(output_r_ARREADY)
    begin
        if ((output_r_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state39_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state39_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(output_r_WREADY)
    begin
        if ((output_r_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;

    ap_ST_fsm_state46_blk_assign_proc : process(output_r_RVALID)
    begin
        if ((output_r_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state46_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state46_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state47_blk <= ap_const_logic_0;

    ap_ST_fsm_state48_blk_assign_proc : process(output_r_AWREADY)
    begin
        if ((output_r_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state48_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state48_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state49_blk_assign_proc : process(ap_block_state49_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state49_io)) then 
            ap_ST_fsm_state49_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state49_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state50_blk_assign_proc : process(output_r_WREADY)
    begin
        if ((output_r_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state50_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state50_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;

    ap_ST_fsm_state54_blk_assign_proc : process(output_r_BVALID)
    begin
        if ((output_r_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state54_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state54_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state55_blk_assign_proc : process(icmp_ln40_reg_708, output_r_BVALID)
    begin
        if (((output_r_BVALID = ap_const_logic_0) and (icmp_ln40_reg_708 = ap_const_lv1_1))) then 
            ap_ST_fsm_state55_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state55_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(output_r_BVALID)
    begin
        if ((output_r_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state19_io_assign_proc : process(input_r_ARREADY, output_r_AWREADY)
    begin
                ap_block_state19_io <= ((output_r_AWREADY = ap_const_logic_0) or (input_r_ARREADY = ap_const_logic_0));
    end process;


    ap_block_state49_io_assign_proc : process(output_r_AWREADY, output_r_WREADY)
    begin
                ap_block_state49_io <= ((output_r_WREADY = ap_const_logic_0) or (output_r_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state55_assign_proc : process(icmp_ln40_reg_708, output_r_BVALID)
    begin
                ap_block_state55 <= ((output_r_BVALID = ap_const_logic_0) and (icmp_ln40_reg_708 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state9, icmp_ln27_fu_302_p2)
    begin
        if (((icmp_ln27_fu_302_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9, icmp_ln27_fu_302_p2)
    begin
        if (((icmp_ln27_fu_302_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    front_1_fu_515_p2 <= std_logic_vector(unsigned(front_fu_118) + unsigned(ap_const_lv32_1));
    icmp_ln27_fu_302_p2 <= "1" when (step_fu_114 = ap_const_lv4_F) else "0";
    icmp_ln36_1_fu_462_p2 <= "1" when (edge_idx_1_reg_259 = sext_ln36_1_reg_682) else "0";
    icmp_ln36_fu_412_p2 <= "1" when (signed(edge_start_reg_647) < signed(edge_end_reg_655)) else "0";
    icmp_ln40_fu_507_p2 <= "1" when (output_r_addr_3_read_reg_703 = ap_const_lv32_0) else "0";

    input_r_ARADDR_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state29, input_r_addr_reg_641, input_r_addr_1_reg_671, input_r_ARREADY, ap_block_state19_io)
    begin
        if (((input_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            input_r_ARADDR <= input_r_addr_1_reg_671;
        elsif (((ap_const_boolean_0 = ap_block_state19_io) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            input_r_ARADDR <= input_r_addr_reg_641;
        else 
            input_r_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ARLEN_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state29, sub_ln36_reg_666, input_r_ARREADY, ap_block_state19_io)
    begin
        if (((input_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            input_r_ARLEN <= sub_ln36_reg_666;
        elsif (((ap_const_boolean_0 = ap_block_state19_io) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            input_r_ARLEN <= ap_const_lv32_2;
        else 
            input_r_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ARVALID_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state29, input_r_ARREADY, ap_block_state19_io)
    begin
        if ((((input_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((ap_const_boolean_0 = ap_block_state19_io) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
            input_r_ARVALID <= ap_const_logic_1;
        else 
            input_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    input_r_RREADY_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state37, input_r_RVALID)
    begin
        if ((((input_r_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((input_r_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27)) or ((input_r_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26)))) then 
            input_r_RREADY <= ap_const_logic_1;
        else 
            input_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_r_blk_n_AR_assign_proc : process(m_axi_input_r_ARREADY, ap_CS_fsm_state19, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            input_r_blk_n_AR <= m_axi_input_r_ARREADY;
        else 
            input_r_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    input_r_blk_n_R_assign_proc : process(m_axi_input_r_RVALID, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            input_r_blk_n_R <= m_axi_input_r_RVALID;
        else 
            input_r_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    output_r_ARADDR_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state39, output_r_addr_1_reg_624, output_r_addr_3_reg_696, output_r_ARREADY)
    begin
        if ((output_r_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                output_r_ARADDR <= output_r_addr_3_reg_696;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                output_r_ARADDR <= output_r_addr_1_reg_624;
            else 
                output_r_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            output_r_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ARVALID_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state39, output_r_ARREADY)
    begin
        if ((((output_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((output_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            output_r_ARVALID <= ap_const_logic_1;
        else 
            output_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    output_r_AWADDR_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state2, ap_CS_fsm_state49, ap_CS_fsm_state48, output_r_addr_reg_610, output_r_addr_2_reg_635, output_r_addr_3_reg_696, output_r_addr_4_reg_712, output_r_AWREADY, ap_block_state19_io, ap_block_state49_io)
    begin
        if (((output_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            output_r_AWADDR <= output_r_addr_4_reg_712;
        elsif (((ap_const_boolean_0 = ap_block_state49_io) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            output_r_AWADDR <= output_r_addr_3_reg_696;
        elsif (((ap_const_boolean_0 = ap_block_state19_io) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            output_r_AWADDR <= output_r_addr_2_reg_635;
        elsif (((output_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            output_r_AWADDR <= output_r_addr_reg_610;
        else 
            output_r_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_AWVALID_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state2, ap_CS_fsm_state49, ap_CS_fsm_state48, output_r_AWREADY, ap_block_state19_io, ap_block_state49_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state49_io) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((ap_const_boolean_0 = ap_block_state19_io) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((output_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((output_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            output_r_AWVALID <= ap_const_logic_1;
        else 
            output_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    output_r_BREADY_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state25, ap_CS_fsm_state55, icmp_ln40_reg_708, ap_CS_fsm_state54, output_r_BVALID)
    begin
        if ((((output_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state54)) or ((output_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((output_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((output_r_BVALID = ap_const_logic_0) and (icmp_ln40_reg_708 = ap_const_lv1_1))) and (icmp_ln40_reg_708 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55)))) then 
            output_r_BREADY <= ap_const_logic_1;
        else 
            output_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    output_r_RREADY_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state46, output_r_RVALID)
    begin
        if ((((output_r_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46)) or ((output_r_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            output_r_RREADY <= ap_const_logic_1;
        else 
            output_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    output_r_WDATA_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state20, ap_CS_fsm_state49, ap_CS_fsm_state50, src_read_reg_583, neighbor_reg_690)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            output_r_WDATA <= neighbor_reg_690;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            output_r_WDATA <= ap_const_lv32_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_r_WDATA <= src_read_reg_583;
        else 
            output_r_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_WVALID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state20, ap_CS_fsm_state49, ap_CS_fsm_state50, output_r_WREADY, ap_block_state49_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state49_io) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((output_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50)) or ((output_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((output_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            output_r_WVALID <= ap_const_logic_1;
        else 
            output_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    output_r_blk_n_AR_assign_proc : process(m_axi_output_r_ARREADY, ap_CS_fsm_state10, ap_CS_fsm_state39)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            output_r_blk_n_AR <= m_axi_output_r_ARREADY;
        else 
            output_r_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    output_r_blk_n_AW_assign_proc : process(m_axi_output_r_AWREADY, ap_CS_fsm_state19, ap_CS_fsm_state2, ap_CS_fsm_state49, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            output_r_blk_n_AW <= m_axi_output_r_AWREADY;
        else 
            output_r_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    output_r_blk_n_B_assign_proc : process(m_axi_output_r_BVALID, ap_CS_fsm_state8, ap_CS_fsm_state25, ap_CS_fsm_state55, icmp_ln40_reg_708, ap_CS_fsm_state54)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((icmp_ln40_reg_708 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55)))) then 
            output_r_blk_n_B <= m_axi_output_r_BVALID;
        else 
            output_r_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    output_r_blk_n_R_assign_proc : process(m_axi_output_r_RVALID, ap_CS_fsm_state17, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            output_r_blk_n_R <= m_axi_output_r_RVALID;
        else 
            output_r_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    output_r_blk_n_W_assign_proc : process(m_axi_output_r_WREADY, ap_CS_fsm_state3, ap_CS_fsm_state20, ap_CS_fsm_state49, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            output_r_blk_n_W <= m_axi_output_r_WREADY;
        else 
            output_r_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

        sext_ln25_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_269_p4),64));

        sext_ln30_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_331_p4),64));

        sext_ln31_1_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_fu_367_p4),64));

        sext_ln31_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1_fu_351_p3),64));

        sext_ln33_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_fu_392_p4),64));

        sext_ln36_1_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(edge_end_reg_655),64));

        sext_ln36_2_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln4_fu_436_p4),64));

        sext_ln36_3_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln2_fu_420_p3),64));

        sext_ln36_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(edge_start_reg_647),64));

        sext_ln40_1_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln5_fu_487_p4),64));

        sext_ln40_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln3_fu_471_p3),64));

        sext_ln43_1_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln6_fu_538_p4),64));

        sext_ln43_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln4_fu_521_p3),64));

    shl_ln1_fu_351_p3 <= (current_node_reg_630 & ap_const_lv2_0);
    shl_ln2_fu_420_p3 <= (edge_start_reg_647 & ap_const_lv2_0);
    shl_ln3_fu_471_p3 <= (neighbor_reg_690 & ap_const_lv2_0);
    shl_ln4_fu_521_p3 <= (front_1_fu_515_p2 & ap_const_lv2_0);
    shl_ln_fu_314_p3 <= (step_fu_114 & ap_const_lv2_0);
    sub_ln36_fu_416_p2 <= std_logic_vector(signed(edge_end_reg_655) - signed(edge_start_reg_647));
    trunc_ln1_fu_331_p4 <= add_ln30_fu_326_p2(63 downto 2);
    trunc_ln2_fu_367_p4 <= add_ln31_fu_362_p2(63 downto 2);
    trunc_ln3_fu_392_p4 <= add_ln33_fu_387_p2(63 downto 2);
    trunc_ln4_fu_436_p4 <= add_ln36_fu_431_p2(63 downto 2);
    trunc_ln5_fu_487_p4 <= add_ln40_fu_482_p2(63 downto 2);
    trunc_ln6_fu_538_p4 <= add_ln43_fu_533_p2(63 downto 2);
    trunc_ln_fu_269_p4 <= queue(63 downto 2);
    zext_ln30_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_314_p3),64));
end behav;

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="shortest_shortest,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2951,HLS_SYN_LUT=4299,HLS_VERSION=2022_1}" *)

module shortest (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_input_r_AWVALID,
        m_axi_input_r_AWREADY,
        m_axi_input_r_AWADDR,
        m_axi_input_r_AWID,
        m_axi_input_r_AWLEN,
        m_axi_input_r_AWSIZE,
        m_axi_input_r_AWBURST,
        m_axi_input_r_AWLOCK,
        m_axi_input_r_AWCACHE,
        m_axi_input_r_AWPROT,
        m_axi_input_r_AWQOS,
        m_axi_input_r_AWREGION,
        m_axi_input_r_AWUSER,
        m_axi_input_r_WVALID,
        m_axi_input_r_WREADY,
        m_axi_input_r_WDATA,
        m_axi_input_r_WSTRB,
        m_axi_input_r_WLAST,
        m_axi_input_r_WID,
        m_axi_input_r_WUSER,
        m_axi_input_r_ARVALID,
        m_axi_input_r_ARREADY,
        m_axi_input_r_ARADDR,
        m_axi_input_r_ARID,
        m_axi_input_r_ARLEN,
        m_axi_input_r_ARSIZE,
        m_axi_input_r_ARBURST,
        m_axi_input_r_ARLOCK,
        m_axi_input_r_ARCACHE,
        m_axi_input_r_ARPROT,
        m_axi_input_r_ARQOS,
        m_axi_input_r_ARREGION,
        m_axi_input_r_ARUSER,
        m_axi_input_r_RVALID,
        m_axi_input_r_RREADY,
        m_axi_input_r_RDATA,
        m_axi_input_r_RLAST,
        m_axi_input_r_RID,
        m_axi_input_r_RUSER,
        m_axi_input_r_RRESP,
        m_axi_input_r_BVALID,
        m_axi_input_r_BREADY,
        m_axi_input_r_BRESP,
        m_axi_input_r_BID,
        m_axi_input_r_BUSER,
        m_axi_output_r_AWVALID,
        m_axi_output_r_AWREADY,
        m_axi_output_r_AWADDR,
        m_axi_output_r_AWID,
        m_axi_output_r_AWLEN,
        m_axi_output_r_AWSIZE,
        m_axi_output_r_AWBURST,
        m_axi_output_r_AWLOCK,
        m_axi_output_r_AWCACHE,
        m_axi_output_r_AWPROT,
        m_axi_output_r_AWQOS,
        m_axi_output_r_AWREGION,
        m_axi_output_r_AWUSER,
        m_axi_output_r_WVALID,
        m_axi_output_r_WREADY,
        m_axi_output_r_WDATA,
        m_axi_output_r_WSTRB,
        m_axi_output_r_WLAST,
        m_axi_output_r_WID,
        m_axi_output_r_WUSER,
        m_axi_output_r_ARVALID,
        m_axi_output_r_ARREADY,
        m_axi_output_r_ARADDR,
        m_axi_output_r_ARID,
        m_axi_output_r_ARLEN,
        m_axi_output_r_ARSIZE,
        m_axi_output_r_ARBURST,
        m_axi_output_r_ARLOCK,
        m_axi_output_r_ARCACHE,
        m_axi_output_r_ARPROT,
        m_axi_output_r_ARQOS,
        m_axi_output_r_ARREGION,
        m_axi_output_r_ARUSER,
        m_axi_output_r_RVALID,
        m_axi_output_r_RREADY,
        m_axi_output_r_RDATA,
        m_axi_output_r_RLAST,
        m_axi_output_r_RID,
        m_axi_output_r_RUSER,
        m_axi_output_r_RRESP,
        m_axi_output_r_BVALID,
        m_axi_output_r_BREADY,
        m_axi_output_r_BRESP,
        m_axi_output_r_BID,
        m_axi_output_r_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        s_axi_sqrt_AWVALID,
        s_axi_sqrt_AWREADY,
        s_axi_sqrt_AWADDR,
        s_axi_sqrt_WVALID,
        s_axi_sqrt_WREADY,
        s_axi_sqrt_WDATA,
        s_axi_sqrt_WSTRB,
        s_axi_sqrt_ARVALID,
        s_axi_sqrt_ARREADY,
        s_axi_sqrt_ARADDR,
        s_axi_sqrt_RVALID,
        s_axi_sqrt_RREADY,
        s_axi_sqrt_RDATA,
        s_axi_sqrt_RRESP,
        s_axi_sqrt_BVALID,
        s_axi_sqrt_BREADY,
        s_axi_sqrt_BRESP
);

parameter    ap_ST_fsm_state1 = 55'd1;
parameter    ap_ST_fsm_state2 = 55'd2;
parameter    ap_ST_fsm_state3 = 55'd4;
parameter    ap_ST_fsm_state4 = 55'd8;
parameter    ap_ST_fsm_state5 = 55'd16;
parameter    ap_ST_fsm_state6 = 55'd32;
parameter    ap_ST_fsm_state7 = 55'd64;
parameter    ap_ST_fsm_state8 = 55'd128;
parameter    ap_ST_fsm_state9 = 55'd256;
parameter    ap_ST_fsm_state10 = 55'd512;
parameter    ap_ST_fsm_state11 = 55'd1024;
parameter    ap_ST_fsm_state12 = 55'd2048;
parameter    ap_ST_fsm_state13 = 55'd4096;
parameter    ap_ST_fsm_state14 = 55'd8192;
parameter    ap_ST_fsm_state15 = 55'd16384;
parameter    ap_ST_fsm_state16 = 55'd32768;
parameter    ap_ST_fsm_state17 = 55'd65536;
parameter    ap_ST_fsm_state18 = 55'd131072;
parameter    ap_ST_fsm_state19 = 55'd262144;
parameter    ap_ST_fsm_state20 = 55'd524288;
parameter    ap_ST_fsm_state21 = 55'd1048576;
parameter    ap_ST_fsm_state22 = 55'd2097152;
parameter    ap_ST_fsm_state23 = 55'd4194304;
parameter    ap_ST_fsm_state24 = 55'd8388608;
parameter    ap_ST_fsm_state25 = 55'd16777216;
parameter    ap_ST_fsm_state26 = 55'd33554432;
parameter    ap_ST_fsm_state27 = 55'd67108864;
parameter    ap_ST_fsm_state28 = 55'd134217728;
parameter    ap_ST_fsm_state29 = 55'd268435456;
parameter    ap_ST_fsm_state30 = 55'd536870912;
parameter    ap_ST_fsm_state31 = 55'd1073741824;
parameter    ap_ST_fsm_state32 = 55'd2147483648;
parameter    ap_ST_fsm_state33 = 55'd4294967296;
parameter    ap_ST_fsm_state34 = 55'd8589934592;
parameter    ap_ST_fsm_state35 = 55'd17179869184;
parameter    ap_ST_fsm_state36 = 55'd34359738368;
parameter    ap_ST_fsm_state37 = 55'd68719476736;
parameter    ap_ST_fsm_state38 = 55'd137438953472;
parameter    ap_ST_fsm_state39 = 55'd274877906944;
parameter    ap_ST_fsm_state40 = 55'd549755813888;
parameter    ap_ST_fsm_state41 = 55'd1099511627776;
parameter    ap_ST_fsm_state42 = 55'd2199023255552;
parameter    ap_ST_fsm_state43 = 55'd4398046511104;
parameter    ap_ST_fsm_state44 = 55'd8796093022208;
parameter    ap_ST_fsm_state45 = 55'd17592186044416;
parameter    ap_ST_fsm_state46 = 55'd35184372088832;
parameter    ap_ST_fsm_state47 = 55'd70368744177664;
parameter    ap_ST_fsm_state48 = 55'd140737488355328;
parameter    ap_ST_fsm_state49 = 55'd281474976710656;
parameter    ap_ST_fsm_state50 = 55'd562949953421312;
parameter    ap_ST_fsm_state51 = 55'd1125899906842624;
parameter    ap_ST_fsm_state52 = 55'd2251799813685248;
parameter    ap_ST_fsm_state53 = 55'd4503599627370496;
parameter    ap_ST_fsm_state54 = 55'd9007199254740992;
parameter    ap_ST_fsm_state55 = 55'd18014398509481984;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_SQRT_DATA_WIDTH = 32;
parameter    C_S_AXI_SQRT_ADDR_WIDTH = 5;
parameter    C_M_AXI_INPUT_R_ID_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_ADDR_WIDTH = 64;
parameter    C_M_AXI_INPUT_R_DATA_WIDTH = 32;
parameter    C_M_AXI_INPUT_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_USER_VALUE = 0;
parameter    C_M_AXI_INPUT_R_PROT_VALUE = 0;
parameter    C_M_AXI_INPUT_R_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_OUTPUT_R_ID_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_ADDR_WIDTH = 64;
parameter    C_M_AXI_OUTPUT_R_DATA_WIDTH = 32;
parameter    C_M_AXI_OUTPUT_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_USER_VALUE = 0;
parameter    C_M_AXI_OUTPUT_R_PROT_VALUE = 0;
parameter    C_M_AXI_OUTPUT_R_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_SQRT_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_INPUT_R_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_OUTPUT_R_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_input_r_AWVALID;
input   m_axi_input_r_AWREADY;
output  [C_M_AXI_INPUT_R_ADDR_WIDTH - 1:0] m_axi_input_r_AWADDR;
output  [C_M_AXI_INPUT_R_ID_WIDTH - 1:0] m_axi_input_r_AWID;
output  [7:0] m_axi_input_r_AWLEN;
output  [2:0] m_axi_input_r_AWSIZE;
output  [1:0] m_axi_input_r_AWBURST;
output  [1:0] m_axi_input_r_AWLOCK;
output  [3:0] m_axi_input_r_AWCACHE;
output  [2:0] m_axi_input_r_AWPROT;
output  [3:0] m_axi_input_r_AWQOS;
output  [3:0] m_axi_input_r_AWREGION;
output  [C_M_AXI_INPUT_R_AWUSER_WIDTH - 1:0] m_axi_input_r_AWUSER;
output   m_axi_input_r_WVALID;
input   m_axi_input_r_WREADY;
output  [C_M_AXI_INPUT_R_DATA_WIDTH - 1:0] m_axi_input_r_WDATA;
output  [C_M_AXI_INPUT_R_WSTRB_WIDTH - 1:0] m_axi_input_r_WSTRB;
output   m_axi_input_r_WLAST;
output  [C_M_AXI_INPUT_R_ID_WIDTH - 1:0] m_axi_input_r_WID;
output  [C_M_AXI_INPUT_R_WUSER_WIDTH - 1:0] m_axi_input_r_WUSER;
output   m_axi_input_r_ARVALID;
input   m_axi_input_r_ARREADY;
output  [C_M_AXI_INPUT_R_ADDR_WIDTH - 1:0] m_axi_input_r_ARADDR;
output  [C_M_AXI_INPUT_R_ID_WIDTH - 1:0] m_axi_input_r_ARID;
output  [7:0] m_axi_input_r_ARLEN;
output  [2:0] m_axi_input_r_ARSIZE;
output  [1:0] m_axi_input_r_ARBURST;
output  [1:0] m_axi_input_r_ARLOCK;
output  [3:0] m_axi_input_r_ARCACHE;
output  [2:0] m_axi_input_r_ARPROT;
output  [3:0] m_axi_input_r_ARQOS;
output  [3:0] m_axi_input_r_ARREGION;
output  [C_M_AXI_INPUT_R_ARUSER_WIDTH - 1:0] m_axi_input_r_ARUSER;
input   m_axi_input_r_RVALID;
output   m_axi_input_r_RREADY;
input  [C_M_AXI_INPUT_R_DATA_WIDTH - 1:0] m_axi_input_r_RDATA;
input   m_axi_input_r_RLAST;
input  [C_M_AXI_INPUT_R_ID_WIDTH - 1:0] m_axi_input_r_RID;
input  [C_M_AXI_INPUT_R_RUSER_WIDTH - 1:0] m_axi_input_r_RUSER;
input  [1:0] m_axi_input_r_RRESP;
input   m_axi_input_r_BVALID;
output   m_axi_input_r_BREADY;
input  [1:0] m_axi_input_r_BRESP;
input  [C_M_AXI_INPUT_R_ID_WIDTH - 1:0] m_axi_input_r_BID;
input  [C_M_AXI_INPUT_R_BUSER_WIDTH - 1:0] m_axi_input_r_BUSER;
output   m_axi_output_r_AWVALID;
input   m_axi_output_r_AWREADY;
output  [C_M_AXI_OUTPUT_R_ADDR_WIDTH - 1:0] m_axi_output_r_AWADDR;
output  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1:0] m_axi_output_r_AWID;
output  [7:0] m_axi_output_r_AWLEN;
output  [2:0] m_axi_output_r_AWSIZE;
output  [1:0] m_axi_output_r_AWBURST;
output  [1:0] m_axi_output_r_AWLOCK;
output  [3:0] m_axi_output_r_AWCACHE;
output  [2:0] m_axi_output_r_AWPROT;
output  [3:0] m_axi_output_r_AWQOS;
output  [3:0] m_axi_output_r_AWREGION;
output  [C_M_AXI_OUTPUT_R_AWUSER_WIDTH - 1:0] m_axi_output_r_AWUSER;
output   m_axi_output_r_WVALID;
input   m_axi_output_r_WREADY;
output  [C_M_AXI_OUTPUT_R_DATA_WIDTH - 1:0] m_axi_output_r_WDATA;
output  [C_M_AXI_OUTPUT_R_WSTRB_WIDTH - 1:0] m_axi_output_r_WSTRB;
output   m_axi_output_r_WLAST;
output  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1:0] m_axi_output_r_WID;
output  [C_M_AXI_OUTPUT_R_WUSER_WIDTH - 1:0] m_axi_output_r_WUSER;
output   m_axi_output_r_ARVALID;
input   m_axi_output_r_ARREADY;
output  [C_M_AXI_OUTPUT_R_ADDR_WIDTH - 1:0] m_axi_output_r_ARADDR;
output  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1:0] m_axi_output_r_ARID;
output  [7:0] m_axi_output_r_ARLEN;
output  [2:0] m_axi_output_r_ARSIZE;
output  [1:0] m_axi_output_r_ARBURST;
output  [1:0] m_axi_output_r_ARLOCK;
output  [3:0] m_axi_output_r_ARCACHE;
output  [2:0] m_axi_output_r_ARPROT;
output  [3:0] m_axi_output_r_ARQOS;
output  [3:0] m_axi_output_r_ARREGION;
output  [C_M_AXI_OUTPUT_R_ARUSER_WIDTH - 1:0] m_axi_output_r_ARUSER;
input   m_axi_output_r_RVALID;
output   m_axi_output_r_RREADY;
input  [C_M_AXI_OUTPUT_R_DATA_WIDTH - 1:0] m_axi_output_r_RDATA;
input   m_axi_output_r_RLAST;
input  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1:0] m_axi_output_r_RID;
input  [C_M_AXI_OUTPUT_R_RUSER_WIDTH - 1:0] m_axi_output_r_RUSER;
input  [1:0] m_axi_output_r_RRESP;
input   m_axi_output_r_BVALID;
output   m_axi_output_r_BREADY;
input  [1:0] m_axi_output_r_BRESP;
input  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1:0] m_axi_output_r_BID;
input  [C_M_AXI_OUTPUT_R_BUSER_WIDTH - 1:0] m_axi_output_r_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
input   s_axi_sqrt_AWVALID;
output   s_axi_sqrt_AWREADY;
input  [C_S_AXI_SQRT_ADDR_WIDTH - 1:0] s_axi_sqrt_AWADDR;
input   s_axi_sqrt_WVALID;
output   s_axi_sqrt_WREADY;
input  [C_S_AXI_SQRT_DATA_WIDTH - 1:0] s_axi_sqrt_WDATA;
input  [C_S_AXI_SQRT_WSTRB_WIDTH - 1:0] s_axi_sqrt_WSTRB;
input   s_axi_sqrt_ARVALID;
output   s_axi_sqrt_ARREADY;
input  [C_S_AXI_SQRT_ADDR_WIDTH - 1:0] s_axi_sqrt_ARADDR;
output   s_axi_sqrt_RVALID;
input   s_axi_sqrt_RREADY;
output  [C_S_AXI_SQRT_DATA_WIDTH - 1:0] s_axi_sqrt_RDATA;
output  [1:0] s_axi_sqrt_RRESP;
output   s_axi_sqrt_BVALID;
input   s_axi_sqrt_BREADY;
output  [1:0] s_axi_sqrt_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [54:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] column_indices;
wire   [63:0] row_offsets;
wire   [63:0] visited;
wire   [63:0] queue;
wire   [31:0] src;
reg    input_r_blk_n_AR;
wire    ap_CS_fsm_state19;
reg    input_r_blk_n_R;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state37;
reg    output_r_blk_n_AW;
wire    ap_CS_fsm_state2;
reg    output_r_blk_n_W;
wire    ap_CS_fsm_state3;
reg    output_r_blk_n_B;
wire    ap_CS_fsm_state8;
reg    output_r_blk_n_AR;
wire    ap_CS_fsm_state10;
reg    output_r_blk_n_R;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state55;
reg   [0:0] icmp_ln40_reg_708;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state54;
reg   [31:0] src_read_reg_583;
reg   [63:0] queue_read_reg_588;
reg   [63:0] visited_read_reg_594;
reg   [63:0] row_offsets_read_reg_600;
reg   [63:0] column_indices_read_reg_605;
reg   [63:0] output_r_addr_reg_610;
wire   [3:0] add_ln27_fu_308_p2;
reg   [3:0] add_ln27_reg_619;
wire    ap_CS_fsm_state9;
reg   [63:0] output_r_addr_1_reg_624;
wire   [0:0] icmp_ln27_fu_302_p2;
reg   [31:0] current_node_reg_630;
reg   [63:0] output_r_addr_2_reg_635;
wire    ap_CS_fsm_state18;
reg   [63:0] input_r_addr_reg_641;
reg  signed [31:0] edge_start_reg_647;
reg  signed [31:0] edge_end_reg_655;
wire   [0:0] icmp_ln36_fu_412_p2;
reg   [0:0] icmp_ln36_reg_662;
wire    ap_CS_fsm_state28;
wire   [31:0] sub_ln36_fu_416_p2;
reg   [31:0] sub_ln36_reg_666;
reg   [63:0] input_r_addr_1_reg_671;
wire  signed [63:0] sext_ln36_fu_456_p1;
wire    ap_CS_fsm_state35;
wire  signed [63:0] sext_ln36_1_fu_459_p1;
reg  signed [63:0] sext_ln36_1_reg_682;
reg   [31:0] neighbor_reg_690;
reg   [63:0] output_r_addr_3_reg_696;
wire    ap_CS_fsm_state38;
reg   [31:0] output_r_addr_3_read_reg_703;
wire   [0:0] icmp_ln40_fu_507_p2;
wire    ap_CS_fsm_state47;
reg   [63:0] output_r_addr_4_reg_712;
wire   [63:0] add_ln36_1_fu_563_p2;
wire    input_r_AWREADY;
wire    input_r_WREADY;
reg    input_r_ARVALID;
wire    input_r_ARREADY;
reg   [63:0] input_r_ARADDR;
reg   [31:0] input_r_ARLEN;
wire    input_r_RVALID;
reg    input_r_RREADY;
wire   [31:0] input_r_RDATA;
wire   [8:0] input_r_RFIFONUM;
wire    input_r_BVALID;
reg    output_r_AWVALID;
wire    output_r_AWREADY;
reg   [63:0] output_r_AWADDR;
reg    output_r_WVALID;
wire    output_r_WREADY;
reg   [31:0] output_r_WDATA;
reg    output_r_ARVALID;
wire    output_r_ARREADY;
reg   [63:0] output_r_ARADDR;
wire    output_r_RVALID;
reg    output_r_RREADY;
wire   [31:0] output_r_RDATA;
wire   [8:0] output_r_RFIFONUM;
wire    output_r_BVALID;
reg    output_r_BREADY;
reg   [63:0] edge_idx_1_reg_259;
reg    ap_block_state55;
wire  signed [63:0] sext_ln25_fu_279_p1;
wire  signed [63:0] sext_ln30_fu_341_p1;
wire  signed [63:0] sext_ln31_1_fu_377_p1;
wire  signed [63:0] sext_ln33_fu_402_p1;
wire  signed [63:0] sext_ln36_2_fu_446_p1;
wire  signed [63:0] sext_ln40_1_fu_497_p1;
wire  signed [63:0] sext_ln43_1_fu_548_p1;
reg    ap_block_state19_io;
reg    ap_block_state49_io;
reg   [3:0] step_fu_114;
wire    ap_CS_fsm_state36;
wire   [0:0] icmp_ln36_1_fu_462_p2;
reg   [31:0] front_fu_118;
wire   [31:0] front_1_fu_515_p2;
wire   [61:0] trunc_ln_fu_269_p4;
wire   [5:0] shl_ln_fu_314_p3;
wire   [63:0] zext_ln30_fu_322_p1;
wire   [63:0] add_ln30_fu_326_p2;
wire   [61:0] trunc_ln1_fu_331_p4;
wire   [33:0] shl_ln1_fu_351_p3;
wire  signed [63:0] sext_ln31_fu_358_p1;
wire   [63:0] add_ln31_fu_362_p2;
wire   [61:0] trunc_ln2_fu_367_p4;
wire   [63:0] add_ln33_fu_387_p2;
wire   [61:0] trunc_ln3_fu_392_p4;
wire   [33:0] shl_ln2_fu_420_p3;
wire  signed [63:0] sext_ln36_3_fu_427_p1;
wire   [63:0] add_ln36_fu_431_p2;
wire   [61:0] trunc_ln4_fu_436_p4;
wire   [33:0] shl_ln3_fu_471_p3;
wire  signed [63:0] sext_ln40_fu_478_p1;
wire   [63:0] add_ln40_fu_482_p2;
wire   [61:0] trunc_ln5_fu_487_p4;
wire   [33:0] shl_ln4_fu_521_p3;
wire  signed [63:0] sext_ln43_fu_529_p1;
wire   [63:0] add_ln43_fu_533_p2;
wire   [61:0] trunc_ln6_fu_538_p4;
reg   [54:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
reg    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
reg    ap_ST_fsm_state19_blk;
reg    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
reg    ap_ST_fsm_state25_blk;
reg    ap_ST_fsm_state26_blk;
reg    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
reg    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
reg    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
reg    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
reg    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
reg    ap_ST_fsm_state48_blk;
reg    ap_ST_fsm_state49_blk;
reg    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
reg    ap_ST_fsm_state54_blk;
reg    ap_ST_fsm_state55_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 55'd1;
end

shortest_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .column_indices(column_indices),
    .row_offsets(row_offsets),
    .visited(visited),
    .queue(queue)
);

shortest_sqrt_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_SQRT_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_SQRT_DATA_WIDTH ))
sqrt_s_axi_U(
    .AWVALID(s_axi_sqrt_AWVALID),
    .AWREADY(s_axi_sqrt_AWREADY),
    .AWADDR(s_axi_sqrt_AWADDR),
    .WVALID(s_axi_sqrt_WVALID),
    .WREADY(s_axi_sqrt_WREADY),
    .WDATA(s_axi_sqrt_WDATA),
    .WSTRB(s_axi_sqrt_WSTRB),
    .ARVALID(s_axi_sqrt_ARVALID),
    .ARREADY(s_axi_sqrt_ARREADY),
    .ARADDR(s_axi_sqrt_ARADDR),
    .RVALID(s_axi_sqrt_RVALID),
    .RREADY(s_axi_sqrt_RREADY),
    .RDATA(s_axi_sqrt_RDATA),
    .RRESP(s_axi_sqrt_RRESP),
    .BVALID(s_axi_sqrt_BVALID),
    .BREADY(s_axi_sqrt_BREADY),
    .BRESP(s_axi_sqrt_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .src(src)
);

shortest_input_r_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_INPUT_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_INPUT_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_INPUT_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_INPUT_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_INPUT_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_INPUT_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_INPUT_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_INPUT_R_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_INPUT_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_INPUT_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_INPUT_R_CACHE_VALUE ),
    .USER_DW( 32 ),
    .USER_AW( 64 ))
input_r_m_axi_U(
    .AWVALID(m_axi_input_r_AWVALID),
    .AWREADY(m_axi_input_r_AWREADY),
    .AWADDR(m_axi_input_r_AWADDR),
    .AWID(m_axi_input_r_AWID),
    .AWLEN(m_axi_input_r_AWLEN),
    .AWSIZE(m_axi_input_r_AWSIZE),
    .AWBURST(m_axi_input_r_AWBURST),
    .AWLOCK(m_axi_input_r_AWLOCK),
    .AWCACHE(m_axi_input_r_AWCACHE),
    .AWPROT(m_axi_input_r_AWPROT),
    .AWQOS(m_axi_input_r_AWQOS),
    .AWREGION(m_axi_input_r_AWREGION),
    .AWUSER(m_axi_input_r_AWUSER),
    .WVALID(m_axi_input_r_WVALID),
    .WREADY(m_axi_input_r_WREADY),
    .WDATA(m_axi_input_r_WDATA),
    .WSTRB(m_axi_input_r_WSTRB),
    .WLAST(m_axi_input_r_WLAST),
    .WID(m_axi_input_r_WID),
    .WUSER(m_axi_input_r_WUSER),
    .ARVALID(m_axi_input_r_ARVALID),
    .ARREADY(m_axi_input_r_ARREADY),
    .ARADDR(m_axi_input_r_ARADDR),
    .ARID(m_axi_input_r_ARID),
    .ARLEN(m_axi_input_r_ARLEN),
    .ARSIZE(m_axi_input_r_ARSIZE),
    .ARBURST(m_axi_input_r_ARBURST),
    .ARLOCK(m_axi_input_r_ARLOCK),
    .ARCACHE(m_axi_input_r_ARCACHE),
    .ARPROT(m_axi_input_r_ARPROT),
    .ARQOS(m_axi_input_r_ARQOS),
    .ARREGION(m_axi_input_r_ARREGION),
    .ARUSER(m_axi_input_r_ARUSER),
    .RVALID(m_axi_input_r_RVALID),
    .RREADY(m_axi_input_r_RREADY),
    .RDATA(m_axi_input_r_RDATA),
    .RLAST(m_axi_input_r_RLAST),
    .RID(m_axi_input_r_RID),
    .RUSER(m_axi_input_r_RUSER),
    .RRESP(m_axi_input_r_RRESP),
    .BVALID(m_axi_input_r_BVALID),
    .BREADY(m_axi_input_r_BREADY),
    .BRESP(m_axi_input_r_BRESP),
    .BID(m_axi_input_r_BID),
    .BUSER(m_axi_input_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(input_r_ARVALID),
    .I_ARREADY(input_r_ARREADY),
    .I_ARADDR(input_r_ARADDR),
    .I_ARLEN(input_r_ARLEN),
    .I_RVALID(input_r_RVALID),
    .I_RREADY(input_r_RREADY),
    .I_RDATA(input_r_RDATA),
    .I_RFIFONUM(input_r_RFIFONUM),
    .I_AWVALID(1'b0),
    .I_AWREADY(input_r_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWLEN(32'd0),
    .I_WVALID(1'b0),
    .I_WREADY(input_r_WREADY),
    .I_WDATA(32'd0),
    .I_WSTRB(4'd0),
    .I_BVALID(input_r_BVALID),
    .I_BREADY(1'b0)
);

shortest_output_r_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_OUTPUT_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_OUTPUT_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_OUTPUT_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_OUTPUT_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_OUTPUT_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_OUTPUT_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_OUTPUT_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_OUTPUT_R_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_OUTPUT_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_OUTPUT_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_OUTPUT_R_CACHE_VALUE ),
    .USER_DW( 32 ),
    .USER_AW( 64 ))
output_r_m_axi_U(
    .AWVALID(m_axi_output_r_AWVALID),
    .AWREADY(m_axi_output_r_AWREADY),
    .AWADDR(m_axi_output_r_AWADDR),
    .AWID(m_axi_output_r_AWID),
    .AWLEN(m_axi_output_r_AWLEN),
    .AWSIZE(m_axi_output_r_AWSIZE),
    .AWBURST(m_axi_output_r_AWBURST),
    .AWLOCK(m_axi_output_r_AWLOCK),
    .AWCACHE(m_axi_output_r_AWCACHE),
    .AWPROT(m_axi_output_r_AWPROT),
    .AWQOS(m_axi_output_r_AWQOS),
    .AWREGION(m_axi_output_r_AWREGION),
    .AWUSER(m_axi_output_r_AWUSER),
    .WVALID(m_axi_output_r_WVALID),
    .WREADY(m_axi_output_r_WREADY),
    .WDATA(m_axi_output_r_WDATA),
    .WSTRB(m_axi_output_r_WSTRB),
    .WLAST(m_axi_output_r_WLAST),
    .WID(m_axi_output_r_WID),
    .WUSER(m_axi_output_r_WUSER),
    .ARVALID(m_axi_output_r_ARVALID),
    .ARREADY(m_axi_output_r_ARREADY),
    .ARADDR(m_axi_output_r_ARADDR),
    .ARID(m_axi_output_r_ARID),
    .ARLEN(m_axi_output_r_ARLEN),
    .ARSIZE(m_axi_output_r_ARSIZE),
    .ARBURST(m_axi_output_r_ARBURST),
    .ARLOCK(m_axi_output_r_ARLOCK),
    .ARCACHE(m_axi_output_r_ARCACHE),
    .ARPROT(m_axi_output_r_ARPROT),
    .ARQOS(m_axi_output_r_ARQOS),
    .ARREGION(m_axi_output_r_ARREGION),
    .ARUSER(m_axi_output_r_ARUSER),
    .RVALID(m_axi_output_r_RVALID),
    .RREADY(m_axi_output_r_RREADY),
    .RDATA(m_axi_output_r_RDATA),
    .RLAST(m_axi_output_r_RLAST),
    .RID(m_axi_output_r_RID),
    .RUSER(m_axi_output_r_RUSER),
    .RRESP(m_axi_output_r_RRESP),
    .BVALID(m_axi_output_r_BVALID),
    .BREADY(m_axi_output_r_BREADY),
    .BRESP(m_axi_output_r_BRESP),
    .BID(m_axi_output_r_BID),
    .BUSER(m_axi_output_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(output_r_ARVALID),
    .I_ARREADY(output_r_ARREADY),
    .I_ARADDR(output_r_ARADDR),
    .I_ARLEN(32'd1),
    .I_RVALID(output_r_RVALID),
    .I_RREADY(output_r_RREADY),
    .I_RDATA(output_r_RDATA),
    .I_RFIFONUM(output_r_RFIFONUM),
    .I_AWVALID(output_r_AWVALID),
    .I_AWREADY(output_r_AWREADY),
    .I_AWADDR(output_r_AWADDR),
    .I_AWLEN(32'd1),
    .I_WVALID(output_r_WVALID),
    .I_WREADY(output_r_WREADY),
    .I_WDATA(output_r_WDATA),
    .I_WSTRB(4'd15),
    .I_BVALID(output_r_BVALID),
    .I_BREADY(output_r_BREADY)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((output_r_BVALID == 1'b0) & (icmp_ln40_reg_708 == 1'd1)) & (1'b1 == ap_CS_fsm_state55))) begin
        edge_idx_1_reg_259 <= add_ln36_1_fu_563_p2;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        edge_idx_1_reg_259 <= sext_ln36_fu_456_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        front_fu_118 <= 32'd0;
    end else if (((icmp_ln40_fu_507_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
        front_fu_118 <= front_1_fu_515_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        step_fu_114 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state36) & ((icmp_ln36_1_fu_462_p2 == 1'd1) | (icmp_ln36_reg_662 == 1'd0)))) begin
        step_fu_114 <= add_ln27_reg_619;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln27_reg_619 <= add_ln27_fu_308_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        column_indices_read_reg_605 <= column_indices;
        output_r_addr_reg_610 <= sext_ln25_fu_279_p1;
        queue_read_reg_588 <= queue;
        row_offsets_read_reg_600 <= row_offsets;
        src_read_reg_583 <= src;
        visited_read_reg_594 <= visited;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        current_node_reg_630 <= output_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        edge_end_reg_655 <= input_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        edge_start_reg_647 <= input_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        icmp_ln36_reg_662 <= icmp_ln36_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        icmp_ln40_reg_708 <= icmp_ln40_fu_507_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_fu_412_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
        input_r_addr_1_reg_671 <= sext_ln36_2_fu_446_p1;
        sub_ln36_reg_666 <= sub_ln36_fu_416_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        input_r_addr_reg_641 <= sext_ln33_fu_402_p1;
        output_r_addr_2_reg_635 <= sext_ln31_1_fu_377_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        neighbor_reg_690 <= input_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_fu_302_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        output_r_addr_1_reg_624 <= sext_ln30_fu_341_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        output_r_addr_3_read_reg_703 <= output_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        output_r_addr_3_reg_696 <= sext_ln40_1_fu_497_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_fu_507_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
        output_r_addr_4_reg_712 <= sext_ln43_1_fu_548_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        sext_ln36_1_reg_682 <= sext_ln36_1_fu_459_p1;
    end
end

always @ (*) begin
    if ((output_r_ARREADY == 1'b0)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

always @ (*) begin
    if ((output_r_RVALID == 1'b0)) begin
        ap_ST_fsm_state17_blk = 1'b1;
    end else begin
        ap_ST_fsm_state17_blk = 1'b0;
    end
end

assign ap_ST_fsm_state18_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state19_io)) begin
        ap_ST_fsm_state19_blk = 1'b1;
    end else begin
        ap_ST_fsm_state19_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((output_r_WREADY == 1'b0)) begin
        ap_ST_fsm_state20_blk = 1'b1;
    end else begin
        ap_ST_fsm_state20_blk = 1'b0;
    end
end

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

always @ (*) begin
    if ((output_r_BVALID == 1'b0)) begin
        ap_ST_fsm_state25_blk = 1'b1;
    end else begin
        ap_ST_fsm_state25_blk = 1'b0;
    end
end

always @ (*) begin
    if ((input_r_RVALID == 1'b0)) begin
        ap_ST_fsm_state26_blk = 1'b1;
    end else begin
        ap_ST_fsm_state26_blk = 1'b0;
    end
end

always @ (*) begin
    if ((input_r_RVALID == 1'b0)) begin
        ap_ST_fsm_state27_blk = 1'b1;
    end else begin
        ap_ST_fsm_state27_blk = 1'b0;
    end
end

assign ap_ST_fsm_state28_blk = 1'b0;

always @ (*) begin
    if ((input_r_ARREADY == 1'b0)) begin
        ap_ST_fsm_state29_blk = 1'b1;
    end else begin
        ap_ST_fsm_state29_blk = 1'b0;
    end
end

always @ (*) begin
    if ((output_r_AWREADY == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

always @ (*) begin
    if ((input_r_RVALID == 1'b0)) begin
        ap_ST_fsm_state37_blk = 1'b1;
    end else begin
        ap_ST_fsm_state37_blk = 1'b0;
    end
end

assign ap_ST_fsm_state38_blk = 1'b0;

always @ (*) begin
    if ((output_r_ARREADY == 1'b0)) begin
        ap_ST_fsm_state39_blk = 1'b1;
    end else begin
        ap_ST_fsm_state39_blk = 1'b0;
    end
end

always @ (*) begin
    if ((output_r_WREADY == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

always @ (*) begin
    if ((output_r_RVALID == 1'b0)) begin
        ap_ST_fsm_state46_blk = 1'b1;
    end else begin
        ap_ST_fsm_state46_blk = 1'b0;
    end
end

assign ap_ST_fsm_state47_blk = 1'b0;

always @ (*) begin
    if ((output_r_AWREADY == 1'b0)) begin
        ap_ST_fsm_state48_blk = 1'b1;
    end else begin
        ap_ST_fsm_state48_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state49_io)) begin
        ap_ST_fsm_state49_blk = 1'b1;
    end else begin
        ap_ST_fsm_state49_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((output_r_WREADY == 1'b0)) begin
        ap_ST_fsm_state50_blk = 1'b1;
    end else begin
        ap_ST_fsm_state50_blk = 1'b0;
    end
end

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

always @ (*) begin
    if ((output_r_BVALID == 1'b0)) begin
        ap_ST_fsm_state54_blk = 1'b1;
    end else begin
        ap_ST_fsm_state54_blk = 1'b0;
    end
end

always @ (*) begin
    if (((output_r_BVALID == 1'b0) & (icmp_ln40_reg_708 == 1'd1))) begin
        ap_ST_fsm_state55_blk = 1'b1;
    end else begin
        ap_ST_fsm_state55_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if ((output_r_BVALID == 1'b0)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln27_fu_302_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln27_fu_302_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((input_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
        input_r_ARADDR = input_r_addr_1_reg_671;
    end else if (((1'b0 == ap_block_state19_io) & (1'b1 == ap_CS_fsm_state19))) begin
        input_r_ARADDR = input_r_addr_reg_641;
    end else begin
        input_r_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((input_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
        input_r_ARLEN = sub_ln36_reg_666;
    end else if (((1'b0 == ap_block_state19_io) & (1'b1 == ap_CS_fsm_state19))) begin
        input_r_ARLEN = 32'd2;
    end else begin
        input_r_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((input_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((1'b0 == ap_block_state19_io) & (1'b1 == ap_CS_fsm_state19)))) begin
        input_r_ARVALID = 1'b1;
    end else begin
        input_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((input_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37)) | ((input_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((input_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state26)))) begin
        input_r_RREADY = 1'b1;
    end else begin
        input_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state19))) begin
        input_r_blk_n_AR = m_axi_input_r_ARREADY;
    end else begin
        input_r_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26))) begin
        input_r_blk_n_R = m_axi_input_r_RVALID;
    end else begin
        input_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((output_r_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state39)) begin
            output_r_ARADDR = output_r_addr_3_reg_696;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            output_r_ARADDR = output_r_addr_1_reg_624;
        end else begin
            output_r_ARADDR = 'bx;
        end
    end else begin
        output_r_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((output_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state39)) | ((output_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10)))) begin
        output_r_ARVALID = 1'b1;
    end else begin
        output_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((output_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state48))) begin
        output_r_AWADDR = output_r_addr_4_reg_712;
    end else if (((1'b0 == ap_block_state49_io) & (1'b1 == ap_CS_fsm_state49))) begin
        output_r_AWADDR = output_r_addr_3_reg_696;
    end else if (((1'b0 == ap_block_state19_io) & (1'b1 == ap_CS_fsm_state19))) begin
        output_r_AWADDR = output_r_addr_2_reg_635;
    end else if (((output_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        output_r_AWADDR = output_r_addr_reg_610;
    end else begin
        output_r_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state49_io) & (1'b1 == ap_CS_fsm_state49)) | ((1'b0 == ap_block_state19_io) & (1'b1 == ap_CS_fsm_state19)) | ((output_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state48)) | ((output_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        output_r_AWVALID = 1'b1;
    end else begin
        output_r_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((output_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state54)) | ((output_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((output_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | (~((output_r_BVALID == 1'b0) & (icmp_ln40_reg_708 == 1'd1)) & (icmp_ln40_reg_708 == 1'd1) & (1'b1 == ap_CS_fsm_state55)))) begin
        output_r_BREADY = 1'b1;
    end else begin
        output_r_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((output_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state46)) | ((output_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17)))) begin
        output_r_RREADY = 1'b1;
    end else begin
        output_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        output_r_WDATA = neighbor_reg_690;
    end else if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state20))) begin
        output_r_WDATA = 32'd1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_r_WDATA = src_read_reg_583;
    end else begin
        output_r_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state49_io) & (1'b1 == ap_CS_fsm_state49)) | ((output_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state50)) | ((output_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((output_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        output_r_WVALID = 1'b1;
    end else begin
        output_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state10))) begin
        output_r_blk_n_AR = m_axi_output_r_ARREADY;
    end else begin
        output_r_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state19))) begin
        output_r_blk_n_AW = m_axi_output_r_AWREADY;
    end else begin
        output_r_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state8) | ((icmp_ln40_reg_708 == 1'd1) & (1'b1 == ap_CS_fsm_state55)))) begin
        output_r_blk_n_B = m_axi_output_r_BVALID;
    end else begin
        output_r_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state17))) begin
        output_r_blk_n_R = m_axi_output_r_RVALID;
    end else begin
        output_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state3))) begin
        output_r_blk_n_W = m_axi_output_r_WREADY;
    end else begin
        output_r_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((output_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((output_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((output_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((icmp_ln27_fu_302_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((output_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((output_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((1'b0 == ap_block_state19_io) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((output_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((output_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((input_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((input_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((icmp_ln36_fu_412_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((input_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            if (((1'b1 == ap_CS_fsm_state36) & ((icmp_ln36_1_fu_462_p2 == 1'd1) | (icmp_ln36_reg_662 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((input_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            if (((output_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            if (((output_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            if (((icmp_ln40_fu_507_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state48 : begin
            if (((output_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state48))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state49 : begin
            if (((1'b0 == ap_block_state49_io) & (1'b1 == ap_CS_fsm_state49))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state50 : begin
            if (((output_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            if (((output_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state54))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state55 : begin
            if ((~((output_r_BVALID == 1'b0) & (icmp_ln40_reg_708 == 1'd1)) & (1'b1 == ap_CS_fsm_state55))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln27_fu_308_p2 = (step_fu_114 + 4'd1);

assign add_ln30_fu_326_p2 = (zext_ln30_fu_322_p1 + queue_read_reg_588);

assign add_ln31_fu_362_p2 = ($signed(sext_ln31_fu_358_p1) + $signed(visited_read_reg_594));

assign add_ln33_fu_387_p2 = ($signed(sext_ln31_fu_358_p1) + $signed(row_offsets_read_reg_600));

assign add_ln36_1_fu_563_p2 = (edge_idx_1_reg_259 + 64'd1);

assign add_ln36_fu_431_p2 = ($signed(sext_ln36_3_fu_427_p1) + $signed(column_indices_read_reg_605));

assign add_ln40_fu_482_p2 = ($signed(sext_ln40_fu_478_p1) + $signed(visited_read_reg_594));

assign add_ln43_fu_533_p2 = ($signed(sext_ln43_fu_529_p1) + $signed(queue_read_reg_588));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state19_io = ((output_r_AWREADY == 1'b0) | (input_r_ARREADY == 1'b0));
end

always @ (*) begin
    ap_block_state49_io = ((output_r_WREADY == 1'b0) | (output_r_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state55 = ((output_r_BVALID == 1'b0) & (icmp_ln40_reg_708 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign front_1_fu_515_p2 = (front_fu_118 + 32'd1);

assign icmp_ln27_fu_302_p2 = ((step_fu_114 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln36_1_fu_462_p2 = ((edge_idx_1_reg_259 == sext_ln36_1_reg_682) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_412_p2 = (($signed(edge_start_reg_647) < $signed(edge_end_reg_655)) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_507_p2 = ((output_r_addr_3_read_reg_703 == 32'd0) ? 1'b1 : 1'b0);

assign sext_ln25_fu_279_p1 = $signed(trunc_ln_fu_269_p4);

assign sext_ln30_fu_341_p1 = $signed(trunc_ln1_fu_331_p4);

assign sext_ln31_1_fu_377_p1 = $signed(trunc_ln2_fu_367_p4);

assign sext_ln31_fu_358_p1 = $signed(shl_ln1_fu_351_p3);

assign sext_ln33_fu_402_p1 = $signed(trunc_ln3_fu_392_p4);

assign sext_ln36_1_fu_459_p1 = edge_end_reg_655;

assign sext_ln36_2_fu_446_p1 = $signed(trunc_ln4_fu_436_p4);

assign sext_ln36_3_fu_427_p1 = $signed(shl_ln2_fu_420_p3);

assign sext_ln36_fu_456_p1 = edge_start_reg_647;

assign sext_ln40_1_fu_497_p1 = $signed(trunc_ln5_fu_487_p4);

assign sext_ln40_fu_478_p1 = $signed(shl_ln3_fu_471_p3);

assign sext_ln43_1_fu_548_p1 = $signed(trunc_ln6_fu_538_p4);

assign sext_ln43_fu_529_p1 = $signed(shl_ln4_fu_521_p3);

assign shl_ln1_fu_351_p3 = {{current_node_reg_630}, {2'd0}};

assign shl_ln2_fu_420_p3 = {{edge_start_reg_647}, {2'd0}};

assign shl_ln3_fu_471_p3 = {{neighbor_reg_690}, {2'd0}};

assign shl_ln4_fu_521_p3 = {{front_1_fu_515_p2}, {2'd0}};

assign shl_ln_fu_314_p3 = {{step_fu_114}, {2'd0}};

assign sub_ln36_fu_416_p2 = ($signed(edge_end_reg_655) - $signed(edge_start_reg_647));

assign trunc_ln1_fu_331_p4 = {{add_ln30_fu_326_p2[63:2]}};

assign trunc_ln2_fu_367_p4 = {{add_ln31_fu_362_p2[63:2]}};

assign trunc_ln3_fu_392_p4 = {{add_ln33_fu_387_p2[63:2]}};

assign trunc_ln4_fu_436_p4 = {{add_ln36_fu_431_p2[63:2]}};

assign trunc_ln5_fu_487_p4 = {{add_ln40_fu_482_p2[63:2]}};

assign trunc_ln6_fu_538_p4 = {{add_ln43_fu_533_p2[63:2]}};

assign trunc_ln_fu_269_p4 = {{queue[63:2]}};

assign zext_ln30_fu_322_p1 = shl_ln_fu_314_p3;

endmodule //shortest
